generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  companyId     String?
  company       Company?   @relation(fields: [companyId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id              String        @id @default(cuid())
  name            String
  rut             String        @unique
  giro            String
  address         String
  city            String
  region          String
  phone           String?
  email           String?
  website         String?
  economicActivity String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  users           User[]
  clients         Client[]
  products        Product[]
  invoices        Invoice[]
  certificates    Certificate[]
}

model Client {
  id              String   @id @default(cuid())
  companyId       String
  name            String
  rut             String
  giro            String?
  address         String
  city            String
  region          String
  phone           String?
  email           String?
  contactName     String?
  contactPhone    String?
  contactEmail    String?
  paymentTerms    Int      @default(30) // días
  creditLimit     Decimal  @default(0) @db.Decimal(12, 2)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  company         Company   @relation(fields: [companyId], references: [id])
  invoices        Invoice[]

  @@unique([companyId, rut])
}

model Product {
  id              String        @id @default(cuid())
  companyId       String
  code            String
  name            String
  description     String?
  price           Decimal       @db.Decimal(10, 2)
  cost            Decimal       @default(0) @db.Decimal(10, 2)
  stock           Int           @default(0)
  minStock        Int           @default(0)
  maxStock        Int?
  unit            String        @default("UND") // UND, KG, LT, MT, etc.
  taxRate         Decimal       @default(19) @db.Decimal(5, 2) // IVA 19%
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  company         Company       @relation(fields: [companyId], references: [id])
  invoiceItems    InvoiceItem[]
  movements       Movement[]

  @@unique([companyId, code])
}

model Invoice {
  id                String        @id @default(cuid())
  companyId         String
  clientId          String
  number            Int
  type              InvoiceType   @default(FACTURA)
  status            InvoiceStatus @default(DRAFT)
  issueDate         DateTime      @default(now())
  dueDate           DateTime?
  
  // Campos específicos chilenos
  siiStatus         String?       // Estado en SII
  siiResponse       String?       // Respuesta del SII
  ted               String?       // Timbre Electrónico Digital
  trackingId        String?       // ID de seguimiento SII
  
  subtotal          Decimal       @db.Decimal(12, 2)
  taxAmount         Decimal       @db.Decimal(12, 2)
  total             Decimal       @db.Decimal(12, 2)
  
  notes             String?
  internalNotes     String?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  company           Company       @relation(fields: [companyId], references: [id])
  client            Client        @relation(fields: [clientId], references: [id])
  items             InvoiceItem[]

  @@unique([companyId, number, type])
}

model InvoiceItem {
  id              String   @id @default(cuid())
  invoiceId       String
  productId       String
  quantity        Decimal  @db.Decimal(10, 3)
  unitPrice       Decimal  @db.Decimal(10, 2)
  discount        Decimal  @default(0) @db.Decimal(5, 2) // porcentaje
  taxRate         Decimal  @db.Decimal(5, 2)
  lineTotal       Decimal  @db.Decimal(12, 2)

  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])
}

model Movement {
  id              String       @id @default(cuid())
  productId       String
  type            MovementType
  quantity        Int
  unitCost        Decimal?     @db.Decimal(10, 2)
  totalCost       Decimal?     @db.Decimal(12, 2)
  reason          String
  reference       String?      // número de factura, nota de entrega, etc.
  stockAfter      Int
  date            DateTime     @default(now())
  createdAt       DateTime     @default(now())

  product         Product      @relation(fields: [productId], references: [id])
}

model Certificate {
  id              String      @id @default(cuid())
  companyId       String
  name            String
  type            CertType
  fileName        String
  filePath        String
  validFrom       DateTime
  validUntil      DateTime
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  company         Company     @relation(fields: [companyId], references: [id])
}

enum InvoiceType {
  FACTURA           // Factura electrónica
  BOLETA            // Boleta electrónica
  NOTA_CREDITO      // Nota de crédito
  NOTA_DEBITO       // Nota de débito
  FACTURA_EXENTA    // Factura exenta
}

enum InvoiceStatus {
  DRAFT             // Borrador
  SENT              // Enviada al SII
  ACCEPTED          // Aceptada por SII
  REJECTED          // Rechazada por SII
  CANCELED          // Anulada
  PAID              // Pagada
}

enum MovementType {
  IN                // Entrada
  OUT               // Salida
  ADJUSTMENT        // Ajuste de inventario
  TRANSFER          // Traspaso
}

enum CertType {
  SII_CERTIFICATE   // Certificado SII
  DIGITAL_SIGNATURE // Firma digital
  SSL_CERTIFICATE   // Certificado SSL
}
